---
import { readItems } from "@directus/sdk";
import { Client } from "@/lib/directus";
import Work from "@/components/gallery/Work.astro";

const allWorks = await Client.request(
  readItems("works", {
    filter: { status: { _eq: "published" }, primary_view: { _nnull: true } },
    fields: [
      "*",
      { primary_view: ["id", "width", "height", "description"] },
      { taxonomy: ["taxonomy_id"] },
      { series: ["series_id"] },
      { medium_category: ["medium_id"] },
    ],
    limit: -1,
  }),
);

function shuffleArray<T>(array: T[]): T[] {
  // Create a shallow copy to avoid modifying the original array directly
  const shuffled = array.slice();
  let currentIndex = shuffled.length;
  let randomIndex;

  // While there remain elements to shuffle.
  while (currentIndex !== 0) {
    // Pick a remaining element.
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [shuffled[currentIndex], shuffled[randomIndex]] = [
      shuffled[randomIndex],
      shuffled[currentIndex],
    ];
  }

  return shuffled;
}

const shuffled = shuffleArray(allWorks);

const taxonomies = await Client.request(
  readItems("taxonomy", {
    fields: ["id", "title"],
    limit: -1,
  }),
);
const series = await Client.request(
  readItems("series", {
    fields: ["id", "title"],
    limit: -1,
  }),
);
const mediums = await Client.request(
  readItems("medium", {
    fields: ["id", "title"],
    limit: -1,
  }),
);
---

<main data-filters={JSON.stringify({ taxonomies, series, mediums })}>
  <ul id="container">
    {
      shuffled.map((work) => (
        <li data-work-container>
          <Work work={work} tags={{ taxonomies, series, mediums }} />
        </li>
      ))
    }
  </ul>
  <div id="activeTags"></div>
</main>

<style>
  main {
    width: 100vw;
    height: 100dvh;
    overflow: scroll;
    cursor: grab;

    &:has([data-work].expanded) {
      cursor: default;
    }

    &.moving {
      cursor: grabbing;
      user-select: none;
      * {
        pointer-events: none;
      }
    }
  }
  ul {
    width: max(200vw, 200vh);
  }
  li {
    margin: calc(0.5 * var(--spacing--base));
  }

  #activeTags {
    position: fixed;
    bottom: var(--spacing--base);
    right: var(--spacing--base);
    display: flex;
    gap: var(--spacing--base);
    max-width: calc(100vw - 2 * var(--spacing--base));
    margin-left: calc(6 * var(--spacing--base));
    flex-wrap: wrap;

    .tag {
      color: var(--color-white);
      fill: var(--color-white);

      font-weight: bold;
      text-transform: uppercase;

      display: flex;
      align-items: center;
      gap: calc(0.25 * var(--spacing--base));

      a,
      button {
        padding: calc(0.25 * var(--spacing--base));
        background-color: var(--bg-color);
      }

      &.taxonomies {
        --bg-color: var(--color-filter-taxonomy);
      }
      &.series {
        --bg-color: var(--color-filter-series);
      }
      &.mediums {
        --bg-color: var(--color-filter-medium);
      }
    }
  }
</style>

<script src="./gallery.ts"></script>
<script src="./controller.ts"></script>
