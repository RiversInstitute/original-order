---
import { readItems } from "@directus/sdk";
import { Client } from "@/lib/directus";
import Work from "@/components/gallery/Work.astro";

const allWorks = await Client.request(
  readItems("works", {
    filter: { status: { _eq: "published" } },
    fields: [
      "*",
      { primary_view: ["id", "width", "height"] },
      { taxonomy: [{ taxonomy_id: ["*"] }] },
    ],
    limit: -1,
  }),
);

function shuffleArray<T>(array: T[]): T[] {
  // Create a shallow copy to avoid modifying the original array directly
  const shuffled = array.slice();
  let currentIndex = shuffled.length;
  let randomIndex;

  // While there remain elements to shuffle.
  while (currentIndex !== 0) {
    // Pick a remaining element.
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [shuffled[currentIndex], shuffled[randomIndex]] = [
      shuffled[randomIndex],
      shuffled[currentIndex],
    ];
  }

  return shuffled;
}

const shuffled = shuffleArray(allWorks);
---

<main>
  <ul id="container">
    {
      shuffled.map((work) => (
        <li>
          <Work work={work} />
        </li>
      ))
    }
  </ul>
</main>

<style>
  main {
    width: 100vw;
    height: 100dvh;
    overflow: scroll;
  }
  ul {
    width: 200vw;
  }
  li {
    margin: calc(0.5 * var(--spacing--base));
  }
</style>

<script>
  import pd from "packery";
  import { type Packery } from "packery";

  const container = document.querySelector("#container");
  if (container) {
    const pky = pd as unknown as typeof Packery;
    const p = new pky(container, {
      itemSelector: "li",
      transitionDuration: 0,
      // gutter: 10,
    });

    // window.addEventListener("load", () => {
    //   p.layout();
    // });
  }
</script>
